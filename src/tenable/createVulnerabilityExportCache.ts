import { VulnerabilityExportCache } from ".";
import TenableClient from "./TenableClient";
import {
  ExportStatus,
  ExportVulnerabilitiesOptions,
  VulnerabilityExport,
  VulnerabilityState,
} from "./types";

import { IntegrationLogger } from "@jupiterone/jupiter-managed-integration-sdk";
import pMap from "p-map";

export async function createVulnerabilityExportCache(
  logger: IntegrationLogger,
  client: TenableClient,
): Promise<VulnerabilityExportCache> {
  const vulnerabilityExports = await getVulnerabilityExports(client);
  const vulnerabilityExportMap = new Map<string, VulnerabilityExport[]>();

  logger.info(
    { vulnerabilityExports: vulnerabilityExports.length },
    "Fetched vulnerability exports",
  );

  for (const vulnerabilityExport of vulnerabilityExports) {
    const exportArr =
      vulnerabilityExportMap.get(vulnerabilityExport.asset.uuid) || [];
    vulnerabilityExportMap.set(
      vulnerabilityExport.asset.uuid,
      exportArr.concat(vulnerabilityExport),
    );
  }

  return {
    findVulnerabilitiesExportByAssetUuid: (
      uuid: string,
    ): VulnerabilityExport[] | undefined => vulnerabilityExportMap.get(uuid),
  };
}

async function getVulnerabilityExports(client: TenableClient) {
  const tenableFoundingTime = 1009861200;
  const options: ExportVulnerabilitiesOptions = {
    num_assets: 50,
    filters: {
      first_found: tenableFoundingTime,
      state: [
        VulnerabilityState.Open,
        VulnerabilityState.Reopened,
        VulnerabilityState.Fixed,
      ],
    },
  };
  const { export_uuid: exportUuid } = await client.exportVulnerabilities(
    options,
  );
  let {
    status,
    chunks_available: chunksAvailable,
  } = await client.fetchVulnerabilitiesExportStatus(exportUuid);

  while ([ExportStatus.Processing, ExportStatus.Queued].includes(status)) {
    ({
      status,
      chunks_available: chunksAvailable,
    } = await client.fetchVulnerabilitiesExportStatus(exportUuid));
  }

  const chunkResponses = await pMap(
    chunksAvailable,
    async chunkId =>
      await client.fetchVulnerabilitiesExportChunk(exportUuid, chunkId),
    { concurrency: 3 },
  );

  const vulnerabilityExports = chunkResponses.reduce((prev, cur) => {
    return prev.concat(cur);
  }, []);

  return vulnerabilityExports;
}
